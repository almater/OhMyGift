package ohmygift.rollingpaper.db;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.sql.Statement;import java.util.ArrayList;import java.util.Date;import javax.naming.Context;import javax.naming.InitialContext;import javax.sql.DataSource;import net.sf.json.JSONArray;import net.sf.json.JSONObject;import ohmygift.common.Column;import com.sun.jmx.snmp.Timestamp;public class RollingPaperDAO {	//JDBC Connection, Statement, ResultSet 객체를 생성하면서 null로 초기화 한다.		private DataSource ds= null;		private Connection conn = null;		private Statement stmt = null;		private PreparedStatement pstmt = null;		private ResultSet rs = null;		private String query="";				private String err = "";			public RollingPaperDAO(){			try{								Context initContext = new InitialContext();				Context envContext = (Context)initContext.lookup("java:/comp/env");				ds = (DataSource) envContext.lookup("jdbc/almater2");								System.out.println("접속 성공!!!");				err = "접속성공";			} catch (Exception e){				System.out.println("예외 발생 : "+ e);				err = "예외";			} finally {				;			}		}		/**		 * rollingpaper 을 만든다.		 * @param facebook_id		 * @param gift_id		 * @param end_date		 * @throws SQLException		 */		public String AddRollingPaper(String _me_uid,String _friend_uid, 				String _gift_image, String _gift_name,String _gift_link,				int _gift_price,String _gift_type,String _gift_date)throws SQLException		{						String me_uid = _me_uid;			String friend_uid = _friend_uid;			String gift_image = _gift_image;			String gift_name = _gift_name;			String gift_link = _gift_link;			int gift_price = _gift_price;			String gift_type = _gift_type;			Date gift_date = new Date();						Timestamp time = new Timestamp(System.currentTimeMillis());						String last_insert_id = "";			try{				conn = ds.getConnection();				stmt = conn.createStatement();				query = "insert into rollingpaper values('0','"+me_uid+"','"+friend_uid+"','"+gift_name+"','"						+gift_link+"','"+gift_price+"','"+gift_image+"','"+gift_type+"')";				System.out.println(query);				stmt.executeUpdate(query);								query = "select * from rollingpaper order by id desc limit 1";				System.out.println(query);				rs = stmt.executeQuery(query);								if(rs.next())				{					int last_insert_id_int = rs.getInt("id");					last_insert_id = Integer.toString(last_insert_id_int);				}			} catch(Exception e){				err = e.toString();				System.out.println(err);			} finally {				conn.close();			}						return last_insert_id;		}				/**		 * 롤링페이퍼에 message 를추가한다.		 * @param facebook_id		 * @param paper_id		 * @param message		 * @throws SQLException		 */		public void AddMessage(String facebook_id, String paper_id,String message,String photo_url) throws SQLException		{			String member_id = facebook_id;			try{				conn = ds.getConnection();				stmt = conn.createStatement();				query = "insert into messagelog values('0','"+member_id+"','"+paper_id+"','"+message+"',NOW(),"+"'"+photo_url+"')";				stmt.executeUpdate(query);											} catch(Exception e){				err = e.toString();			} finally {				conn.close();			}		}				/**		 * 해당 롤링 페이퍼의 message 를  load 한다		 * @param paper_id		 * @return		 * @throws SQLException		 */		public ArrayList<MessageBean> getMessage(String paper_id) throws SQLException		{			ArrayList<MessageBean> messageList = new ArrayList<MessageBean>();									String messagelog_id = "";			String member_id = "";			String message ="";			String date="";			String photo_url="";						try{				conn = ds.getConnection();				stmt = conn.createStatement();				String columns = Column.MESSAGELOG_ID+","+Column.MESSAGELOG_MEMBER_ID+","+Column.MESSAGELOG_PAPER_ID+","+Column.MESSAGELOG_MESSAGE+","+Column.MESSAGELOG_DATE+","+Column.MESSAGELOG_PHOTO_URL;								query = "select "+columns+" from messagelog where "+Column.MESSAGELOG_PAPER_ID +"="+paper_id+" order by "+Column.MESSAGELOG_ID+" desc";								rs = stmt.executeQuery(query);								while(rs.next())				{					MessageBean bean = new MessageBean();					messagelog_id = rs.getString(Column.MESSAGELOG_ID);					member_id = rs.getString(Column.MESSAGELOG_MEMBER_ID);					message = rs.getString(Column.MESSAGELOG_MESSAGE);					date = rs.getString(Column.MESSAGELOG_DATE);					photo_url = rs.getString(Column.MESSAGELOG_PHOTO_URL);										bean.setMessagelog_id(messagelog_id);					bean.setMember_id(member_id);					bean.setMessage(message);					bean.setDate(date);					bean.setPhoto_url(photo_url);										messageList.add(bean);				}											}catch(SQLException e){				err = e.toString();				System.out.println(err);			}catch(Exception e){				err = e.toString();				System.out.println(err);			} finally{				if(conn!=null){					try{						conn.close();						System.out.println("접속 중지!");					} catch (SQLException e) {						System.out.println("예외 발생 : "+ e);					}				}			}						return messageList;		}		/**		 * 해당 롤링 페이퍼의 message 를  load 한다		 * @param paper_id		 * @return		 * @throws SQLException		 */		public JSONArray getMessage_JSON(String paper_id) throws SQLException		{			JSONArray parent = new JSONArray();						String messagelog_id = "";			String member_id = "";			String message ="";			String date="";			String photo_url="";												try{				conn = ds.getConnection();				stmt = conn.createStatement();				String columns = Column.MESSAGELOG_ID+","+Column.MESSAGELOG_MEMBER_ID+","+Column.MESSAGELOG_PAPER_ID+","+Column.MESSAGELOG_MESSAGE+","+Column.MESSAGELOG_DATE+","+Column.MESSAGELOG_PHOTO_URL;								query = "select "+columns+" from messagelog where "+Column.MESSAGELOG_PAPER_ID +"="+paper_id+" order by "+Column.MESSAGELOG_ID+" desc";								rs = stmt.executeQuery(query);								while(rs.next())				{					JSONObject object = new JSONObject();										messagelog_id = rs.getString(Column.MESSAGELOG_ID);					member_id = rs.getString(Column.MESSAGELOG_MEMBER_ID);					message = rs.getString(Column.MESSAGELOG_MESSAGE);					date = rs.getString(Column.MESSAGELOG_DATE);					photo_url = rs.getString(Column.MESSAGELOG_PHOTO_URL);										object.put("messagelog_id", messagelog_id);					object.put("member_id",member_id);					object.put("message", message);					object.put("date", date);					object.put("photo_url", photo_url);					parent.add(object);				}											}catch(SQLException e){				System.out.println("예외 발생 : "+ e);			}catch(Exception e){				System.out.println("예외 발생 : "+ e);			} finally{				if(conn!=null){					try{						conn.close();						System.out.println("접속 중지!");					} catch (SQLException e) {						System.out.println("예외 발생 : "+ e);					}				}			}						return parent;		}		public GiftInfoBean getGiftInfo(String paper_id){			GiftInfoBean bean = null;			try{				conn = ds.getConnection();				stmt = conn.createStatement();								query = "select *"+" from rollingpaper where "+Column.ROLL_ID+"="+paper_id;								rs = stmt.executeQuery(query);								while(rs.next())				{					bean = new GiftInfoBean();					String gift_name = rs.getString(Column.ROLL_GIFT_NAME);					String gift_link = rs.getString(Column.ROLL_GIFT_LINK);					int gift_price = rs.getInt(Column.ROLL_GIFT_PRICE);					String gift_image = rs.getString(Column.ROLL_GIFT_IMAGE);					String gift_type = rs.getString(Column.ROLL_GIFT_TYPE);										bean.setGift_name(gift_name);					bean.setGift_link(gift_link);					bean.setGift_price(gift_price);					bean.setGift_image(gift_image);					bean.setGift_type(gift_type);				}			}catch(SQLException e){				err = e.toString();				System.out.println(err);			}catch(Exception e){				err = e.toString();				System.out.println(err);			} finally{				if(conn!=null){					try{						conn.close();						System.out.println("접속 중지!");					} catch (SQLException e) {						System.out.println("예외 발생 : "+ e);					}				}			}						return bean;		}}