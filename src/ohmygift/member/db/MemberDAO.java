package ohmygift.member.db;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.sql.Statement;import java.util.ArrayList;import javax.naming.Context;import javax.naming.InitialContext;import javax.sql.DataSource;import net.sf.json.JSONArray;import net.sf.json.JSONException;import net.sf.json.JSONObject;import ohmygift.common.Column;public class MemberDAO {	private DataSource ds= null;	private Connection conn = null;	private Statement stmt = null;	private Statement stmt2 = null;	private PreparedStatement pstmt = null;	private ResultSet rs = null;	private ResultSet rs2 = null;	private String query="";		private String err = "";		public MemberDAO(){		try{						Context initContext = new InitialContext();			Context envContext = (Context)initContext.lookup("java:/comp/env");			ds = (DataSource) envContext.lookup("jdbc/almater2");					} catch (Exception e){		} finally {			;		}	}	/**	 * 회원 처음 앱 승인 시 회원 이름,생일,uid 를 받아온다.	 * @param name	 * @param birthday	 * @param uid	 * @throws SQLException	 */	public void addMember(String name,String birthday, String uid,String image) throws SQLException{				try{			System.out.println("addMember");			conn = ds.getConnection();			stmt = conn.createStatement();						query = "insert into member values('0','"+uid+"','"+name+"','"+birthday+"','"+"20111123"+"','"+image+"')";			stmt.executeUpdate(query);		} catch(Exception e){			System.out.println("에러");		} finally {			conn.close();		}	}		public JSONArray getFriendMember(String uid_list) throws JSONException	{		JSONArray friend_list = new JSONArray();				int roll_id = 0;		String facebook_id ="";				//ArrayList<String> friend_list = uid_list;		String where_in = "( "+uid_list+" )"; //makeInClause(friend_list);				try{			conn = ds.getConnection();			stmt = conn.createStatement();			stmt2 = conn.createStatement();			String columns = Column.ROLL_ID+","+Column.ROLL_FRIEND_MEMBER_ID;						query = "select "+columns+" from rollingpaper where "+Column.ROLL_FRIEND_MEMBER_ID +" in "+where_in;			rs = stmt.executeQuery(query);						while(rs.next())			{				JSONObject object = new JSONObject();								roll_id = rs.getInt(Column.ROLL_ID);				object.put("roll_id", roll_id);				facebook_id = rs.getString(Column.ROLL_FRIEND_MEMBER_ID);								String columns2 = Column.MEMBER_NAME+","+Column.MEMBER_IMAGE;				query = "select "+columns2+" from member where "+Column.MEMBER_FACEBOOK_ID +"="+facebook_id;				rs2 = stmt2.executeQuery(query);				while(rs2.next())				{					String friend_name = rs2.getString(Column.MEMBER_NAME);					String friend_image = rs2.getString(Column.MEMBER_IMAGE);					object.put("friend_name", friend_name);					object.put("friend_image", friend_image);				}				friend_list.add(object);			}		}catch(SQLException e){			System.out.println("예외 발생 : "+ e);		}catch(Exception e){			System.out.println("예외 발생 : "+ e);		} finally{			if(conn!=null){				try{					stmt.close();					conn.close();					System.out.println("접속 중지!");				} catch (SQLException e) {					System.out.println("예외 발생 : "+ e);				}			}		}		return friend_list;	}		public String getErrMessage()	{		return err;	}		public ArrayList<MemberBean> getMemberList(){		ArrayList<MemberBean> list = new ArrayList<MemberBean>();				String SQL = "Select NAME,AGE,ROLL from member";        try {			rs = stmt.executeQuery(SQL);		} catch (SQLException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}        System.out.println( SQL+ "<BR><BR>");        try {			while (rs.next()) {				MemberBean member = new MemberBean();				member.setName(rs.getString(1));				member.setAge(rs.getInt(2));				member.setRoll(rs.getString(3));				list.add(member);			}			return list;		} catch (SQLException e) {			// TODO Auto-generated catch block			e.printStackTrace();		} finally{			try {				stmt.close();				conn.close();			} catch (SQLException e) {				// TODO Auto-generated catch block				e.printStackTrace();			}		}    		return null;	}}